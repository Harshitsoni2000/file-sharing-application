// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/file_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileService_DownloadFile_FullMethodName = "/main.fileService/DownloadFile"
	FileService_DownloadDir_FullMethodName  = "/main.fileService/DownloadDir"
)

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (FileService_DownloadFileClient, error)
	DownloadDir(ctx context.Context, in *DownloadDirRequest, opts ...grpc.CallOption) (FileService_DownloadDirClient, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (FileService_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[0], FileService_DownloadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileService_DownloadFileClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type fileServiceDownloadFileClient struct {
	grpc.ClientStream
}

func (x *fileServiceDownloadFileClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) DownloadDir(ctx context.Context, in *DownloadDirRequest, opts ...grpc.CallOption) (FileService_DownloadDirClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[1], FileService_DownloadDir_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceDownloadDirClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileService_DownloadDirClient interface {
	Recv() (*DirChunk, error)
	grpc.ClientStream
}

type fileServiceDownloadDirClient struct {
	grpc.ClientStream
}

func (x *fileServiceDownloadDirClient) Recv() (*DirChunk, error) {
	m := new(DirChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	DownloadFile(*DownloadFileRequest, FileService_DownloadFileServer) error
	DownloadDir(*DownloadDirRequest, FileService_DownloadDirServer) error
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) DownloadFile(*DownloadFileRequest, FileService_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFileServiceServer) DownloadDir(*DownloadDirRequest, FileService_DownloadDirServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadDir not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).DownloadFile(m, &fileServiceDownloadFileServer{stream})
}

type FileService_DownloadFileServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type fileServiceDownloadFileServer struct {
	grpc.ServerStream
}

func (x *fileServiceDownloadFileServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _FileService_DownloadDir_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadDirRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).DownloadDir(m, &fileServiceDownloadDirServer{stream})
}

type FileService_DownloadDirServer interface {
	Send(*DirChunk) error
	grpc.ServerStream
}

type fileServiceDownloadDirServer struct {
	grpc.ServerStream
}

func (x *fileServiceDownloadDirServer) Send(m *DirChunk) error {
	return x.ServerStream.SendMsg(m)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.fileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadFile",
			Handler:       _FileService_DownloadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadDir",
			Handler:       _FileService_DownloadDir_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/file_service.proto",
}
